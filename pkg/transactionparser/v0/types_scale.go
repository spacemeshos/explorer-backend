// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

// nolint
package v0

import (
	"github.com/spacemeshos/go-scale"
)

func (t *SpawnTransaction) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact8(enc, uint8(t.Type))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Principal[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact8(enc, uint8(t.Method))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Template[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := t.Payload.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Sign[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpawnTransaction) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact8(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Type = uint8(field)
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Principal[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeCompact8(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Method = uint8(field)
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Template[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := t.Payload.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Sign[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpawnPayload) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.Nonce))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.GasPrice))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := t.Arguments.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpawnPayload) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Nonce = uint64(field)
	}
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.GasPrice = uint64(field)
	}
	{
		n, err := t.Arguments.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpawnArguments) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteArray(enc, t.PublicKey[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpawnArguments) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := scale.DecodeByteArray(dec, t.PublicKey[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpawnMultisigTransaction) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact8(enc, uint8(t.Type))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Principal[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact8(enc, uint8(t.Method))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Template[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := t.Payload.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Sign[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpawnMultisigTransaction) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact8(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Type = uint8(field)
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Principal[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeCompact8(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Method = uint8(field)
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Template[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := t.Payload.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Sign[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpawnMultisigPayload) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.Arguments.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.GasPrice))
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpawnMultisigPayload) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.Arguments.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.GasPrice = uint64(field)
	}
	return total, nil
}

func (t *SpawnMultisigArguments) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeStructSliceWithLimit(enc, t.PublicKeys, 10)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpawnMultisigArguments) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeStructSliceWithLimit[PublicKey](dec, 10)
		if err != nil {
			return total, err
		}
		total += n
		t.PublicKeys = field
	}
	return total, nil
}

func (t *SpendTransaction) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact8(enc, uint8(t.Type))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Principal[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact8(enc, uint8(t.Method))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := t.Payload.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Sign[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpendTransaction) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact8(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Type = uint8(field)
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Principal[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeCompact8(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Method = uint8(field)
	}
	{
		n, err := t.Payload.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Sign[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpendArguments) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteArray(enc, t.Destination[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.Amount))
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpendArguments) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := scale.DecodeByteArray(dec, t.Destination[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Amount = uint64(field)
	}
	return total, nil
}

func (t *SpendPayload) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.Nonce))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.GasPrice))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := t.Arguments.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *SpendPayload) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Nonce = uint64(field)
	}
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.GasPrice = uint64(field)
	}
	{
		n, err := t.Arguments.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}
